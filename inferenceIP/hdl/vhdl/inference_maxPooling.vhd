-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inference_maxPooling is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    arr_ce0 : OUT STD_LOGIC;
    arr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    arr_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    arr_ce1 : OUT STD_LOGIC;
    arr_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    w : IN STD_LOGIC_VECTOR (5 downto 0);
    h : IN STD_LOGIC_VECTOR (4 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of inference_maxPooling is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal t_1_reg_177 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_187 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_fu_223_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_reg_696 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_2_fu_247_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_2_reg_701 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_3_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln26_3_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln26_4_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_4_reg_712 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln26_fu_294_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln26_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_730 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_686_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_28_reg_735 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_691_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_29_reg_741 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln28_fu_319_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln28_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_reg_752 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln28_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_757 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln28_reg_757_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_31_fu_339_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_31_reg_761 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_fu_343_p2 : STD_LOGIC_VECTOR (10 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln34_fu_343_p2 : signal is "no";
    signal add_ln34_reg_766 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_reg_766_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_1_fu_353_p2 : STD_LOGIC_VECTOR (10 downto 0);
    attribute use_dsp48 of add_ln34_1_fu_353_p2 : signal is "no";
    signal add_ln34_1_reg_776 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_1_reg_776_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal arr_load_1_reg_786 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal arr_load_2_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_fu_368_p2 : STD_LOGIC_VECTOR (10 downto 0);
    attribute use_dsp48 of add_ln35_fu_368_p2 : signal is "no";
    signal add_ln35_reg_801 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln35_reg_801_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln35_1_fu_378_p2 : STD_LOGIC_VECTOR (10 downto 0);
    attribute use_dsp48 of add_ln35_1_fu_378_p2 : signal is "no";
    signal add_ln35_1_reg_811 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln28_fu_388_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln28_reg_821 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state8_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal arr_load_3_reg_826 : STD_LOGIC_VECTOR (31 downto 0);
    signal arr_load_4_reg_833 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln11_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_reg_839 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_846 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_1_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_1_reg_851 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_2_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_2_reg_857 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_3_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_3_reg_863 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_1_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_1_reg_869 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln14_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln14_reg_876 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln14_fu_620_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln14_reg_881 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln33_fu_669_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal add_ln26_3_fu_675_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal t_2_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal i_reg_153 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_reg_165 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_j_phi_fu_191_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln34_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_1_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln35_1_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal t_1_cast_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_199_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_206_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub1_fu_217_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_fu_227_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_fu_211_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln_fu_233_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_1_fu_251_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_1_fu_243_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_2_fu_261_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_267_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_277_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln28_1_fu_304_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_fu_323_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln30_fu_363_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln11_fu_394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_397_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_fu_407_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln11_1_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_1_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_432_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_1_fu_442_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln11_3_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_2_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_2_fu_474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_477_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_2_fu_487_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln11_5_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_4_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_3_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_3_fu_520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_523_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_3_fu_533_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln11_7_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_6_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_5_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_4_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_6_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_7_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_2_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln14_1_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln14_3_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln14_2_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln14_4_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln11_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln14_5_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln11_fu_604_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln17_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln14_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln17_1_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln14_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln17_2_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln17_fu_653_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_686_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_691_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_691_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component inference_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component inference_mul_mul_11s_6ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    fcmp_32ns_32ns_1_2_no_dsp_1_U27 : component inference_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_199_p0,
        din1 => grp_fu_199_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_199_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U28 : component inference_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_206_p0,
        din1 => grp_fu_206_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_206_p2);

    mul_mul_11s_6ns_11_4_1_U29 : component inference_mul_mul_11s_6ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 6,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln26_fu_294_p1,
        din1 => grp_fu_686_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_686_p2);

    mul_mul_11s_6ns_11_4_1_U30 : component inference_mul_mul_11s_6ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 6,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_691_p0,
        din1 => grp_fu_691_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_691_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_153 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_reg_153 <= add_ln26_3_fu_675_p2;
            end if; 
        end if;
    end process;

    j_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_reg_757 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_187 <= add_ln28_reg_821;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_reg_187 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    t_1_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln28_reg_757_pp0_iter1_reg = ap_const_lv1_0))) then 
                t_1_reg_177 <= add_ln33_fu_669_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                t_1_reg_177 <= trunc_ln28_fu_319_p1;
            end if; 
        end if;
    end process;

    t_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_reg_165 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                t_reg_165 <= t_2_fu_681_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln28_reg_757 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln28_reg_821 <= add_ln28_fu_388_p2;
                arr_load_3_reg_826 <= arr_q1;
                arr_load_4_reg_833 <= arr_q0;
                tmp_3_reg_846 <= grp_fu_199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_fu_334_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln34_1_reg_776 <= add_ln34_1_fu_353_p2;
                add_ln34_reg_766 <= add_ln34_fu_343_p2;
                empty_31_reg_761 <= empty_31_fu_339_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln34_1_reg_776_pp0_iter1_reg <= add_ln34_1_reg_776;
                add_ln34_reg_766_pp0_iter1_reg <= add_ln34_reg_766;
                icmp_ln28_reg_757 <= icmp_ln28_fu_334_p2;
                icmp_ln28_reg_757_pp0_iter1_reg <= icmp_ln28_reg_757;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln28_reg_757 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln35_1_reg_811 <= add_ln35_1_fu_378_p2;
                add_ln35_reg_801 <= add_ln35_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln35_reg_801_pp0_iter1_reg <= add_ln35_reg_801;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_reg_757 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln11_1_reg_869 <= and_ln11_1_fu_572_p2;
                or_ln11_1_reg_851 <= or_ln11_1_fu_458_p2;
                or_ln11_2_reg_857 <= or_ln11_2_fu_503_p2;
                or_ln11_3_reg_863 <= or_ln11_3_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln28_reg_757_pp0_iter1_reg = ap_const_lv1_0))) then
                and_ln14_reg_876 <= and_ln14_fu_598_p2;
                select_ln14_reg_881 <= select_ln14_fu_620_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln28_reg_757 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                arr_load_1_reg_786 <= arr_q1;
                arr_load_2_reg_793 <= arr_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                empty_28_reg_735 <= grp_fu_686_p2;
                empty_29_reg_741 <= grp_fu_691_p2;
                    zext_ln28_reg_752(6 downto 1) <= zext_ln28_fu_330_p1(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln28_reg_757 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                or_ln11_reg_839 <= or_ln11_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_11_reg_730 <= add_ln28_1_fu_304_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    zext_ln26_2_reg_701(5 downto 0) <= zext_ln26_2_fu_247_p1(5 downto 0);
                    zext_ln26_3_reg_707(4 downto 0) <= zext_ln26_3_fu_257_p1(4 downto 0);
                    zext_ln26_4_reg_712(5 downto 1) <= zext_ln26_4_fu_285_p1(5 downto 1);
                    zext_ln26_reg_696(5 downto 0) <= zext_ln26_fu_223_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln26_reg_696(6) <= '0';
    zext_ln26_2_reg_701(10 downto 6) <= "00000";
    zext_ln26_3_reg_707(31 downto 5) <= "000000000000000000000000000";
    zext_ln26_4_reg_712(0) <= '0';
    zext_ln26_4_reg_712(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln28_reg_752(0) <= '0';
    zext_ln28_reg_752(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln26_fu_289_p2, icmp_ln28_fu_334_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln26_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln28_fu_334_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln28_fu_334_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln26_1_fu_251_p2 <= std_logic_vector(unsigned(trunc_ln_fu_233_p4) + unsigned(ap_const_lv5_1));
    add_ln26_2_fu_261_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_243_p1) + unsigned(ap_const_lv6_1));
    add_ln26_3_fu_675_p2 <= std_logic_vector(unsigned(i_reg_153) + unsigned(ap_const_lv64_2));
    add_ln26_fu_227_p2 <= std_logic_vector(unsigned(w) + unsigned(ap_const_lv6_3E));
    add_ln28_1_fu_304_p2 <= std_logic_vector(unsigned(zext_ln26_reg_696) + unsigned(ap_const_lv7_1));
    add_ln28_fu_388_p2 <= std_logic_vector(unsigned(j_reg_187) + unsigned(ap_const_lv64_2));
    add_ln33_fu_669_p2 <= std_logic_vector(unsigned(t_1_reg_177) + unsigned(ap_const_lv11_1));
    add_ln34_1_fu_353_p2 <= std_logic_vector(unsigned(empty_31_fu_339_p1) + unsigned(empty_29_reg_741));
    add_ln34_fu_343_p2 <= std_logic_vector(unsigned(empty_31_fu_339_p1) + unsigned(empty_28_reg_735));
    add_ln35_1_fu_378_p2 <= std_logic_vector(unsigned(or_ln30_fu_363_p2) + unsigned(empty_29_reg_741));
    add_ln35_fu_368_p2 <= std_logic_vector(unsigned(or_ln30_fu_363_p2) + unsigned(empty_28_reg_735));
    and_ln11_1_fu_572_p2 <= (and_ln11_7_fu_566_p2 and and_ln11_2_fu_469_p2);
    and_ln11_2_fu_469_p2 <= (tmp_3_reg_846 and and_ln11_fu_464_p2);
    and_ln11_3_fu_509_p2 <= (or_ln11_reg_839 and or_ln11_2_fu_503_p2);
    and_ln11_4_fu_514_p2 <= (grp_fu_199_p2 and and_ln11_3_fu_509_p2);
    and_ln11_5_fu_555_p2 <= (or_ln11_reg_839 and or_ln11_3_fu_549_p2);
    and_ln11_6_fu_560_p2 <= (grp_fu_206_p2 and and_ln11_5_fu_555_p2);
    and_ln11_7_fu_566_p2 <= (and_ln11_6_fu_560_p2 and and_ln11_4_fu_514_p2);
    and_ln11_fu_464_p2 <= (or_ln11_reg_839 and or_ln11_1_fu_458_p2);
    and_ln14_1_fu_578_p2 <= (or_ln11_2_reg_857 and or_ln11_1_reg_851);
    and_ln14_2_fu_582_p2 <= (grp_fu_199_p2 and and_ln14_1_fu_578_p2);
    and_ln14_3_fu_588_p2 <= (or_ln11_3_reg_863 and or_ln11_1_reg_851);
    and_ln14_4_fu_592_p2 <= (grp_fu_206_p2 and and_ln14_3_fu_588_p2);
    and_ln14_5_fu_614_p2 <= (xor_ln11_fu_609_p2 and and_ln14_fu_598_p2);
    and_ln14_fu_598_p2 <= (and_ln14_4_fu_592_p2 and and_ln14_2_fu_582_p2);
    and_ln17_1_fu_631_p2 <= (grp_fu_206_p2 and and_ln17_fu_627_p2);
    and_ln17_2_fu_647_p2 <= (xor_ln14_fu_641_p2 and and_ln17_1_fu_631_p2);
    and_ln17_fu_627_p2 <= (or_ln11_3_reg_863 and or_ln11_2_reg_857);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln28_fu_334_p2)
    begin
        if ((icmp_ln28_fu_334_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln26_fu_289_p2)
    begin
        if ((((icmp_ln26_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_191_p4_assign_proc : process(j_reg_187, icmp_ln28_reg_757, ap_CS_fsm_pp0_stage0, add_ln28_reg_821, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln28_reg_757 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_191_p4 <= add_ln28_reg_821;
        else 
            ap_phi_mux_j_phi_fu_191_p4 <= j_reg_187;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln26_fu_289_p2)
    begin
        if (((icmp_ln26_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    arr_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln34_1_fu_358_p1, ap_block_pp0_stage1, zext_ln35_1_fu_383_p1, zext_ln35_2_fu_659_p1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            arr_address0 <= zext_ln35_2_fu_659_p1(11 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            arr_address0 <= zext_ln35_1_fu_383_p1(11 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            arr_address0 <= zext_ln34_1_fu_358_p1(11 - 1 downto 0);
        else 
            arr_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    arr_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln34_fu_348_p1, zext_ln35_fu_373_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                arr_address1 <= zext_ln35_fu_373_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                arr_address1 <= zext_ln34_fu_348_p1(11 - 1 downto 0);
            else 
                arr_address1 <= "XXXXXXXXXXX";
            end if;
        else 
            arr_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    arr_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            arr_ce0 <= ap_const_logic_1;
        else 
            arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            arr_ce1 <= ap_const_logic_1;
        else 
            arr_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln11_1_fu_429_p1 <= arr_load_2_reg_793;
    bitcast_ln11_2_fu_474_p1 <= arr_load_3_reg_826;
    bitcast_ln11_3_fu_520_p1 <= arr_load_4_reg_833;
    bitcast_ln11_fu_394_p1 <= arr_load_1_reg_786;
    empty_31_fu_339_p1 <= ap_phi_mux_j_phi_fu_191_p4(11 - 1 downto 0);

    grp_fu_199_p0_assign_proc : process(arr_q1, ap_CS_fsm_pp0_stage0, arr_load_1_reg_786, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, arr_load_2_reg_793, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_199_p0 <= arr_load_2_reg_793;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_199_p0 <= arr_load_1_reg_786;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_199_p0 <= arr_q1;
        else 
            grp_fu_199_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_199_p1_assign_proc : process(arr_q0, arr_q1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, arr_load_3_reg_826, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_199_p1 <= arr_load_3_reg_826;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_199_p1 <= arr_q1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_199_p1 <= arr_q0;
        else 
            grp_fu_199_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_206_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, arr_load_1_reg_786, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, arr_load_2_reg_793, ap_CS_fsm_pp0_stage2, arr_load_3_reg_826, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_206_p0 <= arr_load_3_reg_826;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_206_p0 <= arr_load_2_reg_793;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_206_p0 <= arr_load_1_reg_786;
        else 
            grp_fu_206_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_206_p1_assign_proc : process(arr_q0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, arr_load_4_reg_833, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_206_p1 <= arr_load_4_reg_833;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_206_p1 <= arr_q0;
        else 
            grp_fu_206_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_686_p1 <= zext_ln26_2_reg_701(6 - 1 downto 0);
    grp_fu_691_p0 <= (trunc_ln26_fu_294_p1 or ap_const_lv11_1);
    grp_fu_691_p1 <= zext_ln26_2_reg_701(6 - 1 downto 0);
    icmp_ln11_1_fu_417_p2 <= "1" when (trunc_ln11_fu_407_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_2_fu_446_p2 <= "0" when (tmp_2_fu_432_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_3_fu_452_p2 <= "1" when (trunc_ln11_1_fu_442_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_4_fu_491_p2 <= "0" when (tmp_5_fu_477_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_5_fu_497_p2 <= "1" when (trunc_ln11_2_fu_487_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_6_fu_537_p2 <= "0" when (tmp_8_fu_523_p4 = ap_const_lv8_FF) else "1";
    icmp_ln11_7_fu_543_p2 <= "1" when (trunc_ln11_3_fu_533_p1 = ap_const_lv23_0) else "0";
    icmp_ln11_fu_411_p2 <= "0" when (tmp_1_fu_397_p4 = ap_const_lv8_FF) else "1";
    icmp_ln26_fu_289_p2 <= "1" when (i_reg_153 = zext_ln26_4_reg_712) else "0";
    icmp_ln28_fu_334_p2 <= "1" when (ap_phi_mux_j_phi_fu_191_p4 = zext_ln28_reg_752) else "0";
    or_ln11_1_fu_458_p2 <= (icmp_ln11_3_fu_452_p2 or icmp_ln11_2_fu_446_p2);
    or_ln11_2_fu_503_p2 <= (icmp_ln11_5_fu_497_p2 or icmp_ln11_4_fu_491_p2);
    or_ln11_3_fu_549_p2 <= (icmp_ln11_7_fu_543_p2 or icmp_ln11_6_fu_537_p2);
    or_ln11_fu_423_p2 <= (icmp_ln11_fu_411_p2 or icmp_ln11_1_fu_417_p2);
    or_ln14_fu_637_p2 <= (and_ln14_reg_876 or and_ln11_1_reg_869);
    or_ln30_fu_363_p2 <= (empty_31_reg_761 or ap_const_lv11_1);
    out_r_address0 <= t_1_cast_fu_664_p1(11 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= arr_q0;

    out_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln28_reg_757_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln28_reg_757_pp0_iter1_reg = ap_const_lv1_0))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln11_fu_604_p3 <= 
        add_ln34_reg_766_pp0_iter1_reg when (and_ln11_1_reg_869(0) = '1') else 
        add_ln35_1_reg_811;
    select_ln14_fu_620_p3 <= 
        add_ln34_1_reg_776_pp0_iter1_reg when (and_ln14_5_fu_614_p2(0) = '1') else 
        select_ln11_fu_604_p3;
    select_ln17_fu_653_p3 <= 
        add_ln35_reg_801_pp0_iter1_reg when (and_ln17_2_fu_647_p2(0) = '1') else 
        select_ln14_reg_881;
    sub1_fu_217_p2 <= std_logic_vector(unsigned(w) + unsigned(ap_const_lv6_3F));
    sub_fu_211_p2 <= std_logic_vector(unsigned(h) + unsigned(ap_const_lv5_1F));
    t_1_cast_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_1_reg_177),64));
    t_2_fu_681_p2 <= std_logic_vector(unsigned(t_reg_165) + unsigned(zext_ln26_3_reg_707));
    tmp_10_fu_277_p3 <= (tmp_fu_267_p4 & ap_const_lv1_0);
    tmp_12_fu_323_p3 <= (tmp_11_reg_730 & ap_const_lv1_0);
    tmp_1_fu_397_p4 <= bitcast_ln11_fu_394_p1(30 downto 23);
    tmp_2_fu_432_p4 <= bitcast_ln11_1_fu_429_p1(30 downto 23);
    tmp_5_fu_477_p4 <= bitcast_ln11_2_fu_474_p1(30 downto 23);
    tmp_8_fu_523_p4 <= bitcast_ln11_3_fu_520_p1(30 downto 23);
    tmp_fu_267_p4 <= add_ln26_2_fu_261_p2(5 downto 1);
    trunc_ln11_1_fu_442_p1 <= bitcast_ln11_1_fu_429_p1(23 - 1 downto 0);
    trunc_ln11_2_fu_487_p1 <= bitcast_ln11_2_fu_474_p1(23 - 1 downto 0);
    trunc_ln11_3_fu_533_p1 <= bitcast_ln11_3_fu_520_p1(23 - 1 downto 0);
    trunc_ln11_fu_407_p1 <= bitcast_ln11_fu_394_p1(23 - 1 downto 0);
    trunc_ln26_fu_294_p1 <= i_reg_153(11 - 1 downto 0);
    trunc_ln28_fu_319_p1 <= t_reg_165(11 - 1 downto 0);
    trunc_ln_fu_233_p4 <= add_ln26_fu_227_p2(5 downto 1);
    xor_ln11_fu_609_p2 <= (ap_const_lv1_1 xor and_ln11_1_reg_869);
    xor_ln14_fu_641_p2 <= (or_ln14_fu_637_p2 xor ap_const_lv1_1);
    zext_ln26_1_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_fu_211_p2),6));
    zext_ln26_2_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w),11));
    zext_ln26_3_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_251_p2),32));
    zext_ln26_4_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_277_p3),64));
    zext_ln26_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub1_fu_217_p2),7));
    zext_ln28_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_323_p3),64));
    zext_ln34_1_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_1_fu_353_p2),64));
    zext_ln34_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_fu_343_p2),64));
    zext_ln35_1_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_378_p2),64));
    zext_ln35_2_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln17_fu_653_p3),64));
    zext_ln35_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_fu_368_p2),64));
end behav;
