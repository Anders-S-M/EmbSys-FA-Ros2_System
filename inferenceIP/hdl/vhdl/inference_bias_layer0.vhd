-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_bias_layer0_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_bias_layer0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111111111110010001110101000000", 
    1 => "00111111111111100010010010110111", 
    2 => "00000000000000000000000000000000", 
    3 => "00111111101111100000011011111111", 
    4 => "11000000010100110100011001001110", 
    5 => "11000000110000001000000010011110", 
    6 => "10111110001100001001010111101101", 
    7 => "10111111011111010101000100100000", 
    8 => "00000000000000000000000000000000", 
    9 => "10111000110001110100110101111000", 
    10 => "00111111100111000101111111000110", 
    11 => "00111111101011101100001000110000", 
    12 => "10111111111001001001101101011010", 
    13 => "10111111100111011111001101000010", 
    14 => "11000000001011101001001111100000", 
    15 => "10111101100000000100000101110010", 
    16 => "00111111000111111011001111011111", 
    17 => "00111111100110101100000011010110", 
    18 => "10111111000011001010001100011110", 
    19 => "10111111011101000000010111000010", 
    20 => "10111111000100010110111100001010", 
    21 => "10111110000100111010100010111101", 
    22 => "00111110111100011100010101101001", 
    23 => "10111111101110111100001010011101", 
    24 => "00111101101001000000001011000111", 
    25 => "00111111110000110110001110000111", 
    26 => "10111110111110111000100110110100", 
    27 => "00111110000010111010001101000001", 
    28 => "00111110100001100010000111111100", 
    29 => "00111111000001111111111101001101", 
    30 => "10111110000101110101101001000100", 
    31 => "00111111111100001110111001100001", 
    32 => "00111111100111111110001000101000", 
    33 => "00111111110111001111101100101110", 
    34 => "00111111001001101011011111010000", 
    35 => "01000000000110011011011100101101", 
    36 => "00111110101110011011010000000011", 
    37 => "10111101010000101101010001010000", 
    38 => "10111111110111100100010110111110", 
    39 => "00111111000001011101111001101110", 
    40 => "00111111010000100001101010101011", 
    41 => "00111111110111100010101010011011", 
    42 => "10111110100000100100100110001110", 
    43 => "00111101110011110011111000111010", 
    44 => "00000000000000000000000000000000", 
    45 => "00111111110110010001100001101100", 
    46 => "10111110011011101011011110000010", 
    47 => "00111111100100100100001101101010", 
    48 => "00111111100010101101111010101001", 
    49 => "10111101001010000101000100000001", 
    50 => "10111110000001000001100000111100", 
    51 => "10111110100111001011111111110100", 
    52 => "00111111100100111100011110100110", 
    53 => "11000000100101101100000111011000", 
    54 => "10111101001110100000010000101011", 
    55 => "01000000001000111110100110000100", 
    56 => "10111101100110001110001000010111", 
    57 => "00111111000101001101100110101110", 
    58 => "11000000010010101001100000101001", 
    59 => "00111111011111010011100110000101", 
    60 => "00111110110100010110100000010000", 
    61 => "00111111100000110110011110010100", 
    62 => "00111111101100010101110011011000", 
    63 => "11000000010010110100011111110111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_bias_layer0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_bias_layer0 is
    component inference_bias_layer0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_bias_layer0_rom_U :  component inference_bias_layer0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


