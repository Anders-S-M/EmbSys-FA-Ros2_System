// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module inference_convOperation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_address0,
        arr_ce0,
        arr_q0,
        arr_address1,
        arr_ce1,
        arr_q1,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        w,
        h,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        bias
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state58 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] arr_address0;
output   arr_ce0;
input  [31:0] arr_q0;
output  [10:0] arr_address1;
output   arr_ce1;
input  [31:0] arr_q1;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [31:0] p_read2;
input  [31:0] p_read3;
input  [31:0] p_read4;
input  [31:0] p_read5;
input  [31:0] p_read6;
input  [31:0] p_read7;
input  [31:0] p_read8;
input  [5:0] w;
input  [4:0] h;
output  [10:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;
input  [31:0] bias;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] arr_address0;
reg arr_ce0;
reg[10:0] arr_address1;
reg arr_ce1;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] i_reg_252;
reg   [10:0] indvar_flatten_reg_264;
reg   [5:0] j_reg_276;
reg   [10:0] t_reg_287;
reg   [10:0] t_3_reg_298;
wire   [5:0] sub1_fu_329_p2;
reg   [5:0] sub1_reg_684;
wire   [10:0] zext_ln45_fu_335_p1;
reg   [10:0] zext_ln45_reg_689;
wire   [10:0] zext_ln45_2_fu_351_p1;
reg   [10:0] zext_ln45_2_reg_697;
wire   [10:0] bound_fu_389_p2;
reg   [10:0] bound_reg_702;
wire   [10:0] empty_57_fu_405_p2;
reg   [10:0] empty_57_reg_707;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_state17_pp0_stage0_iter3;
wire    ap_block_state22_pp0_stage0_iter4;
wire    ap_block_state27_pp0_stage0_iter5;
wire    ap_block_state32_pp0_stage0_iter6;
wire    ap_block_state37_pp0_stage0_iter7;
wire    ap_block_state42_pp0_stage0_iter8;
wire    ap_block_state47_pp0_stage0_iter9;
wire    ap_block_state52_pp0_stage0_iter10;
wire    ap_block_state57_pp0_stage0_iter11;
wire    ap_block_pp0_stage0_11001;
wire   [10:0] empty_58_fu_414_p2;
reg   [10:0] empty_58_reg_712;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_state18_pp0_stage1_iter3;
wire    ap_block_state23_pp0_stage1_iter4;
wire    ap_block_state28_pp0_stage1_iter5;
wire    ap_block_state33_pp0_stage1_iter6;
wire    ap_block_state38_pp0_stage1_iter7;
wire    ap_block_state43_pp0_stage1_iter8;
wire    ap_block_state48_pp0_stage1_iter9;
wire    ap_block_state53_pp0_stage1_iter10;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] icmp_ln45_fu_419_p2;
reg   [0:0] icmp_ln45_reg_717;
reg   [0:0] icmp_ln45_reg_717_pp0_iter1_reg;
reg   [0:0] icmp_ln45_reg_717_pp0_iter2_reg;
reg   [0:0] icmp_ln45_reg_717_pp0_iter3_reg;
reg   [0:0] icmp_ln45_reg_717_pp0_iter4_reg;
reg   [0:0] icmp_ln45_reg_717_pp0_iter5_reg;
reg   [0:0] icmp_ln45_reg_717_pp0_iter6_reg;
reg   [0:0] icmp_ln45_reg_717_pp0_iter7_reg;
reg   [0:0] icmp_ln45_reg_717_pp0_iter8_reg;
reg   [0:0] icmp_ln45_reg_717_pp0_iter9_reg;
reg   [0:0] icmp_ln45_reg_717_pp0_iter10_reg;
wire   [0:0] icmp_ln47_fu_424_p2;
reg   [0:0] icmp_ln47_reg_721;
reg   [0:0] icmp_ln47_reg_721_pp0_iter1_reg;
reg   [0:0] icmp_ln47_reg_721_pp0_iter2_reg;
reg   [0:0] icmp_ln47_reg_721_pp0_iter3_reg;
reg   [0:0] icmp_ln47_reg_721_pp0_iter4_reg;
reg   [0:0] icmp_ln47_reg_721_pp0_iter5_reg;
reg   [0:0] icmp_ln47_reg_721_pp0_iter6_reg;
reg   [0:0] icmp_ln47_reg_721_pp0_iter7_reg;
reg   [0:0] icmp_ln47_reg_721_pp0_iter8_reg;
reg   [0:0] icmp_ln47_reg_721_pp0_iter9_reg;
wire   [5:0] select_ln45_2_fu_429_p3;
reg   [5:0] select_ln45_2_reg_730;
wire   [10:0] j_cast_fu_444_p1;
reg   [10:0] j_cast_reg_735;
wire   [10:0] zext_ln54_fu_454_p1;
reg   [10:0] zext_ln54_reg_741;
wire   [10:0] add_ln54_fu_458_p2;
reg   [10:0] add_ln54_reg_747;
wire   [4:0] empty_59_fu_480_p2;
reg   [4:0] empty_59_reg_762;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state14_pp0_stage2_iter2;
wire    ap_block_state19_pp0_stage2_iter3;
wire    ap_block_state24_pp0_stage2_iter4;
wire    ap_block_state29_pp0_stage2_iter5;
wire    ap_block_state34_pp0_stage2_iter6;
wire    ap_block_state39_pp0_stage2_iter7;
wire    ap_block_state44_pp0_stage2_iter8;
wire    ap_block_state49_pp0_stage2_iter9;
wire    ap_block_state54_pp0_stage2_iter10;
wire    ap_block_pp0_stage2_11001;
wire   [10:0] empty_60_fu_490_p2;
reg   [10:0] empty_60_reg_767;
wire   [10:0] select_ln45_4_fu_495_p3;
reg   [10:0] select_ln45_4_reg_772;
reg    ap_enable_reg_pp0_iter0;
wire   [10:0] add_ln54_3_fu_511_p2;
reg   [10:0] add_ln54_3_reg_792;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state15_pp0_stage3_iter2;
wire    ap_block_state20_pp0_stage3_iter3;
wire    ap_block_state25_pp0_stage3_iter4;
wire    ap_block_state30_pp0_stage3_iter5;
wire    ap_block_state35_pp0_stage3_iter6;
wire    ap_block_state40_pp0_stage3_iter7;
wire    ap_block_state45_pp0_stage3_iter8;
wire    ap_block_state50_pp0_stage3_iter9;
wire    ap_block_state55_pp0_stage3_iter10;
wire    ap_block_pp0_stage3_11001;
wire   [10:0] add_ln54_6_fu_561_p2;
reg   [10:0] add_ln54_6_reg_822;
wire   [10:0] add_ln54_7_fu_566_p2;
reg   [10:0] add_ln54_7_reg_828;
wire   [4:0] select_ln45_6_fu_571_p3;
reg   [4:0] select_ln45_6_reg_833;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_state16_pp0_stage4_iter2;
wire    ap_block_state21_pp0_stage4_iter3;
wire    ap_block_state26_pp0_stage4_iter4;
wire    ap_block_state31_pp0_stage4_iter5;
wire    ap_block_state36_pp0_stage4_iter6;
wire    ap_block_state41_pp0_stage4_iter7;
wire    ap_block_state46_pp0_stage4_iter8;
wire    ap_block_state51_pp0_stage4_iter9;
wire    ap_block_state56_pp0_stage4_iter10;
wire    ap_block_pp0_stage4_11001;
wire   [10:0] add_ln45_3_fu_585_p2;
reg   [10:0] add_ln45_3_reg_858;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] grp_fu_317_p2;
reg   [31:0] mul_reg_863;
wire   [31:0] grp_fu_322_p2;
reg   [31:0] mul_0_1_reg_868;
reg   [31:0] mul_0_1_reg_868_pp0_iter2_reg;
wire   [5:0] add_ln47_fu_601_p2;
reg   [5:0] add_ln47_reg_888;
reg   [31:0] mul_0_2_reg_893;
reg   [31:0] mul_0_2_reg_893_pp0_iter2_reg;
reg   [31:0] mul_0_2_reg_893_pp0_iter3_reg;
reg   [31:0] mul_1_reg_898;
reg   [31:0] mul_1_reg_898_pp0_iter2_reg;
reg   [31:0] mul_1_reg_898_pp0_iter3_reg;
reg   [31:0] mul_1_reg_898_pp0_iter4_reg;
reg   [31:0] mul_1_1_reg_908;
reg   [31:0] mul_1_1_reg_908_pp0_iter2_reg;
reg   [31:0] mul_1_1_reg_908_pp0_iter3_reg;
reg   [31:0] mul_1_1_reg_908_pp0_iter4_reg;
reg   [31:0] mul_1_1_reg_908_pp0_iter5_reg;
reg   [31:0] mul_1_2_reg_913;
reg   [31:0] mul_1_2_reg_913_pp0_iter2_reg;
reg   [31:0] mul_1_2_reg_913_pp0_iter3_reg;
reg   [31:0] mul_1_2_reg_913_pp0_iter4_reg;
reg   [31:0] mul_1_2_reg_913_pp0_iter5_reg;
reg   [31:0] mul_1_2_reg_913_pp0_iter6_reg;
reg   [31:0] mul_2_reg_918;
reg   [31:0] mul_2_reg_918_pp0_iter2_reg;
reg   [31:0] mul_2_reg_918_pp0_iter3_reg;
reg   [31:0] mul_2_reg_918_pp0_iter4_reg;
reg   [31:0] mul_2_reg_918_pp0_iter5_reg;
reg   [31:0] mul_2_reg_918_pp0_iter6_reg;
reg   [31:0] mul_2_reg_918_pp0_iter7_reg;
reg   [31:0] mul_2_1_reg_923;
reg   [31:0] mul_2_1_reg_923_pp0_iter2_reg;
reg   [31:0] mul_2_1_reg_923_pp0_iter3_reg;
reg   [31:0] mul_2_1_reg_923_pp0_iter4_reg;
reg   [31:0] mul_2_1_reg_923_pp0_iter5_reg;
reg   [31:0] mul_2_1_reg_923_pp0_iter6_reg;
reg   [31:0] mul_2_1_reg_923_pp0_iter7_reg;
reg   [31:0] mul_2_1_reg_923_pp0_iter8_reg;
reg   [31:0] mul_2_2_reg_928;
reg   [31:0] mul_2_2_reg_928_pp0_iter2_reg;
reg   [31:0] mul_2_2_reg_928_pp0_iter3_reg;
reg   [31:0] mul_2_2_reg_928_pp0_iter4_reg;
reg   [31:0] mul_2_2_reg_928_pp0_iter5_reg;
reg   [31:0] mul_2_2_reg_928_pp0_iter6_reg;
reg   [31:0] mul_2_2_reg_928_pp0_iter7_reg;
reg   [31:0] mul_2_2_reg_928_pp0_iter8_reg;
reg   [31:0] mul_2_2_reg_928_pp0_iter9_reg;
wire   [31:0] grp_fu_309_p2;
reg   [31:0] sum_3_reg_933;
reg    ap_enable_reg_pp0_iter2;
wire   [31:0] grp_fu_313_p2;
reg   [31:0] sum_3_0_1_reg_938;
reg    ap_enable_reg_pp0_iter3;
reg   [31:0] sum_3_0_2_reg_943;
reg    ap_enable_reg_pp0_iter4;
reg   [31:0] sum_3_1_reg_948;
reg    ap_enable_reg_pp0_iter5;
reg   [31:0] sum_3_1_1_reg_953;
reg    ap_enable_reg_pp0_iter6;
reg   [31:0] sum_3_1_2_reg_958;
reg    ap_enable_reg_pp0_iter7;
reg   [31:0] sum_3_2_reg_963;
reg    ap_enable_reg_pp0_iter8;
reg   [31:0] sum_3_2_1_reg_968;
reg    ap_enable_reg_pp0_iter9;
wire   [10:0] select_ln45_1_fu_611_p3;
reg   [10:0] select_ln45_1_reg_973;
wire   [10:0] select_ln45_7_fu_618_p3;
reg   [10:0] select_ln45_7_reg_979;
reg    ap_enable_reg_pp0_iter10;
reg   [31:0] sum_3_2_2_reg_984;
wire   [10:0] add_ln57_fu_629_p2;
reg    ap_enable_reg_pp0_iter11;
wire    ap_block_pp0_stage4_subdone;
reg    ap_condition_pp0_flush_enable;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_exit_iter10_state53;
reg   [4:0] ap_phi_mux_i_phi_fu_256_p4;
wire    ap_block_pp0_stage0;
reg   [10:0] ap_phi_mux_indvar_flatten_phi_fu_268_p4;
wire    ap_block_pp0_stage1;
reg   [5:0] ap_phi_mux_j_phi_fu_280_p4;
wire   [63:0] zext_ln54_1_fu_464_p1;
wire   [63:0] zext_ln54_2_fu_475_p1;
wire   [63:0] zext_ln54_3_fu_506_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln54_4_fu_516_p1;
wire   [63:0] zext_ln54_5_fu_546_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln54_6_fu_556_p1;
wire   [63:0] zext_ln54_7_fu_577_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln54_8_fu_581_p1;
wire   [63:0] zext_ln54_9_fu_596_p1;
wire   [63:0] t_3_cast_fu_625_p1;
reg   [31:0] grp_fu_309_p0;
reg   [31:0] grp_fu_309_p1;
reg   [31:0] grp_fu_313_p0;
reg   [31:0] grp_fu_313_p1;
reg   [31:0] grp_fu_317_p0;
reg   [31:0] grp_fu_317_p1;
reg   [31:0] grp_fu_322_p0;
reg   [31:0] grp_fu_322_p1;
wire   [5:0] add_ln45_1_fu_345_p2;
wire   [4:0] add_ln45_fu_339_p2;
wire   [3:0] tmp_fu_355_p4;
wire   [0:0] icmp_fu_365_p2;
wire   [4:0] add_ln45_2_fu_371_p2;
wire   [4:0] select_ln45_fu_377_p3;
wire   [4:0] bound_fu_389_p0;
wire   [5:0] bound_fu_389_p1;
wire   [4:0] empty_fu_395_p2;
wire   [4:0] empty_57_fu_405_p0;
wire   [5:0] empty_57_fu_405_p1;
wire   [4:0] empty_58_fu_414_p0;
wire   [5:0] empty_58_fu_414_p1;
wire   [5:0] empty_62_fu_448_p2;
wire   [10:0] select_ln45_3_fu_437_p3;
wire   [10:0] add_ln54_1_fu_469_p2;
wire   [4:0] empty_60_fu_490_p0;
wire   [5:0] empty_60_fu_490_p1;
wire   [10:0] add_ln54_2_fu_501_p2;
wire   [4:0] p_mid111_fu_521_p2;
wire   [4:0] p_mid113_fu_531_p0;
wire   [5:0] p_mid113_fu_531_p1;
wire   [10:0] p_mid113_fu_531_p2;
wire   [10:0] add_ln54_4_fu_542_p2;
wire   [10:0] add_ln54_5_fu_551_p2;
wire   [10:0] select_ln45_5_fu_536_p3;
wire   [10:0] add_ln54_8_fu_591_p2;
wire   [10:0] add_ln45_4_fu_606_p2;
wire    ap_CS_fsm_state58;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [10:0] bound_fu_389_p00;
wire   [10:0] bound_fu_389_p10;
wire   [10:0] empty_57_fu_405_p00;
wire   [10:0] empty_58_fu_414_p00;
wire   [10:0] empty_60_fu_490_p00;
wire   [10:0] p_mid113_fu_531_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
end

inference_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_309_p0),
    .din1(grp_fu_309_p1),
    .ce(1'b1),
    .dout(grp_fu_309_p2)
);

inference_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_313_p0),
    .din1(grp_fu_313_p1),
    .ce(1'b1),
    .dout(grp_fu_313_p2)
);

inference_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_317_p0),
    .din1(grp_fu_317_p1),
    .ce(1'b1),
    .dout(grp_fu_317_p2)
);

inference_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_322_p0),
    .din1(grp_fu_322_p1),
    .ce(1'b1),
    .dout(grp_fu_322_p2)
);

inference_mul_5ns_6ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
mul_5ns_6ns_11_1_1_U5(
    .din0(bound_fu_389_p0),
    .din1(bound_fu_389_p1),
    .dout(bound_fu_389_p2)
);

inference_mul_5ns_6ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
mul_5ns_6ns_11_1_1_U6(
    .din0(empty_57_fu_405_p0),
    .din1(empty_57_fu_405_p1),
    .dout(empty_57_fu_405_p2)
);

inference_mul_5ns_6ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
mul_5ns_6ns_11_1_1_U7(
    .din0(empty_58_fu_414_p0),
    .din1(empty_58_fu_414_p1),
    .dout(empty_58_fu_414_p2)
);

inference_mul_5ns_6ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
mul_5ns_6ns_11_1_1_U8(
    .din0(empty_60_fu_490_p0),
    .din1(empty_60_fu_490_p1),
    .dout(empty_60_fu_490_p2)
);

inference_mul_5ns_6ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
mul_5ns_6ns_11_1_1_U9(
    .din0(p_mid113_fu_531_p0),
    .din1(p_mid113_fu_531_p1),
    .dout(p_mid113_fu_531_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if ((((ap_enable_reg_pp0_iter9 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter10_state53) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter10_state53) & (((ap_enable_reg_pp0_iter10 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter9;
        end else if ((((ap_enable_reg_pp0_iter10 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone)))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_reg_717 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_252 <= select_ln45_6_reg_833;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_252 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln45_reg_717 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten_reg_264 <= add_ln45_3_reg_858;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_264 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln45_reg_717 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        j_reg_276 <= add_ln47_reg_888;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_276 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_reg_717_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_3_reg_298 <= add_ln57_fu_629_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_3_reg_298 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_reg_717_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_reg_287 <= select_ln45_7_reg_979;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_reg_287 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln45_3_reg_858 <= add_ln45_3_fu_585_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_reg_717 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln47_reg_888 <= add_ln47_fu_601_p2;
        mul_0_1_reg_868 <= grp_fu_322_p2;
        mul_reg_863 <= grp_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln45_reg_717 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln54_3_reg_792 <= add_ln54_3_fu_511_p2;
        select_ln45_4_reg_772 <= select_ln45_4_fu_495_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln45_reg_717 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln54_6_reg_822 <= add_ln54_6_fu_561_p2;
        add_ln54_7_reg_828 <= add_ln54_7_fu_566_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln45_fu_419_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln54_reg_747 <= add_ln54_fu_458_p2;
        icmp_ln47_reg_721 <= icmp_ln47_fu_424_p2;
        j_cast_reg_735[5 : 0] <= j_cast_fu_444_p1[5 : 0];
        select_ln45_2_reg_730 <= select_ln45_2_fu_429_p3;
        zext_ln54_reg_741[5 : 0] <= zext_ln54_fu_454_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        bound_reg_702 <= bound_fu_389_p2;
        sub1_reg_684 <= sub1_fu_329_p2;
        zext_ln45_2_reg_697[5 : 0] <= zext_ln45_2_fu_351_p1[5 : 0];
        zext_ln45_reg_689[5 : 0] <= zext_ln45_fu_335_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_57_reg_707 <= empty_57_fu_405_p2;
        mul_0_1_reg_868_pp0_iter2_reg <= mul_0_1_reg_868;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        empty_58_reg_712 <= empty_58_fu_414_p2;
        icmp_ln45_reg_717 <= icmp_ln45_fu_419_p2;
        icmp_ln45_reg_717_pp0_iter10_reg <= icmp_ln45_reg_717_pp0_iter9_reg;
        icmp_ln45_reg_717_pp0_iter1_reg <= icmp_ln45_reg_717;
        icmp_ln45_reg_717_pp0_iter2_reg <= icmp_ln45_reg_717_pp0_iter1_reg;
        icmp_ln45_reg_717_pp0_iter3_reg <= icmp_ln45_reg_717_pp0_iter2_reg;
        icmp_ln45_reg_717_pp0_iter4_reg <= icmp_ln45_reg_717_pp0_iter3_reg;
        icmp_ln45_reg_717_pp0_iter5_reg <= icmp_ln45_reg_717_pp0_iter4_reg;
        icmp_ln45_reg_717_pp0_iter6_reg <= icmp_ln45_reg_717_pp0_iter5_reg;
        icmp_ln45_reg_717_pp0_iter7_reg <= icmp_ln45_reg_717_pp0_iter6_reg;
        icmp_ln45_reg_717_pp0_iter8_reg <= icmp_ln45_reg_717_pp0_iter7_reg;
        icmp_ln45_reg_717_pp0_iter9_reg <= icmp_ln45_reg_717_pp0_iter8_reg;
        icmp_ln47_reg_721_pp0_iter1_reg <= icmp_ln47_reg_721;
        icmp_ln47_reg_721_pp0_iter2_reg <= icmp_ln47_reg_721_pp0_iter1_reg;
        icmp_ln47_reg_721_pp0_iter3_reg <= icmp_ln47_reg_721_pp0_iter2_reg;
        icmp_ln47_reg_721_pp0_iter4_reg <= icmp_ln47_reg_721_pp0_iter3_reg;
        icmp_ln47_reg_721_pp0_iter5_reg <= icmp_ln47_reg_721_pp0_iter4_reg;
        icmp_ln47_reg_721_pp0_iter6_reg <= icmp_ln47_reg_721_pp0_iter5_reg;
        icmp_ln47_reg_721_pp0_iter7_reg <= icmp_ln47_reg_721_pp0_iter6_reg;
        icmp_ln47_reg_721_pp0_iter8_reg <= icmp_ln47_reg_721_pp0_iter7_reg;
        icmp_ln47_reg_721_pp0_iter9_reg <= icmp_ln47_reg_721_pp0_iter8_reg;
        mul_0_2_reg_893_pp0_iter2_reg <= mul_0_2_reg_893;
        mul_0_2_reg_893_pp0_iter3_reg <= mul_0_2_reg_893_pp0_iter2_reg;
        mul_1_reg_898_pp0_iter2_reg <= mul_1_reg_898;
        mul_1_reg_898_pp0_iter3_reg <= mul_1_reg_898_pp0_iter2_reg;
        mul_1_reg_898_pp0_iter4_reg <= mul_1_reg_898_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        empty_59_reg_762 <= empty_59_fu_480_p2;
        empty_60_reg_767 <= empty_60_fu_490_p2;
        mul_1_1_reg_908_pp0_iter2_reg <= mul_1_1_reg_908;
        mul_1_1_reg_908_pp0_iter3_reg <= mul_1_1_reg_908_pp0_iter2_reg;
        mul_1_1_reg_908_pp0_iter4_reg <= mul_1_1_reg_908_pp0_iter3_reg;
        mul_1_1_reg_908_pp0_iter5_reg <= mul_1_1_reg_908_pp0_iter4_reg;
        mul_1_2_reg_913_pp0_iter2_reg <= mul_1_2_reg_913;
        mul_1_2_reg_913_pp0_iter3_reg <= mul_1_2_reg_913_pp0_iter2_reg;
        mul_1_2_reg_913_pp0_iter4_reg <= mul_1_2_reg_913_pp0_iter3_reg;
        mul_1_2_reg_913_pp0_iter5_reg <= mul_1_2_reg_913_pp0_iter4_reg;
        mul_1_2_reg_913_pp0_iter6_reg <= mul_1_2_reg_913_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln45_reg_717 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        mul_0_2_reg_893 <= grp_fu_317_p2;
        mul_1_reg_898 <= grp_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln45_reg_717_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        mul_1_1_reg_908 <= grp_fu_317_p2;
        mul_1_2_reg_913 <= grp_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln45_reg_717_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        mul_2_1_reg_923 <= grp_fu_322_p2;
        mul_2_reg_918 <= grp_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        mul_2_1_reg_923_pp0_iter2_reg <= mul_2_1_reg_923;
        mul_2_1_reg_923_pp0_iter3_reg <= mul_2_1_reg_923_pp0_iter2_reg;
        mul_2_1_reg_923_pp0_iter4_reg <= mul_2_1_reg_923_pp0_iter3_reg;
        mul_2_1_reg_923_pp0_iter5_reg <= mul_2_1_reg_923_pp0_iter4_reg;
        mul_2_1_reg_923_pp0_iter6_reg <= mul_2_1_reg_923_pp0_iter5_reg;
        mul_2_1_reg_923_pp0_iter7_reg <= mul_2_1_reg_923_pp0_iter6_reg;
        mul_2_1_reg_923_pp0_iter8_reg <= mul_2_1_reg_923_pp0_iter7_reg;
        mul_2_reg_918_pp0_iter2_reg <= mul_2_reg_918;
        mul_2_reg_918_pp0_iter3_reg <= mul_2_reg_918_pp0_iter2_reg;
        mul_2_reg_918_pp0_iter4_reg <= mul_2_reg_918_pp0_iter3_reg;
        mul_2_reg_918_pp0_iter5_reg <= mul_2_reg_918_pp0_iter4_reg;
        mul_2_reg_918_pp0_iter6_reg <= mul_2_reg_918_pp0_iter5_reg;
        mul_2_reg_918_pp0_iter7_reg <= mul_2_reg_918_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln45_reg_717_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        mul_2_2_reg_928 <= grp_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        mul_2_2_reg_928_pp0_iter2_reg <= mul_2_2_reg_928;
        mul_2_2_reg_928_pp0_iter3_reg <= mul_2_2_reg_928_pp0_iter2_reg;
        mul_2_2_reg_928_pp0_iter4_reg <= mul_2_2_reg_928_pp0_iter3_reg;
        mul_2_2_reg_928_pp0_iter5_reg <= mul_2_2_reg_928_pp0_iter4_reg;
        mul_2_2_reg_928_pp0_iter6_reg <= mul_2_2_reg_928_pp0_iter5_reg;
        mul_2_2_reg_928_pp0_iter7_reg <= mul_2_2_reg_928_pp0_iter6_reg;
        mul_2_2_reg_928_pp0_iter8_reg <= mul_2_2_reg_928_pp0_iter7_reg;
        mul_2_2_reg_928_pp0_iter9_reg <= mul_2_2_reg_928_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln45_reg_717_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln45_1_reg_973 <= select_ln45_1_fu_611_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln45_reg_717 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        select_ln45_6_reg_833 <= select_ln45_6_fu_571_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln45_reg_717_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln45_7_reg_979 <= select_ln45_7_fu_618_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_reg_717_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_3_0_1_reg_938 <= grp_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln45_reg_717_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        sum_3_0_2_reg_943 <= grp_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln45_reg_717_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        sum_3_1_1_reg_953 <= grp_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln45_reg_717_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        sum_3_1_2_reg_958 <= grp_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln45_reg_717_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        sum_3_1_reg_948 <= grp_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln45_reg_717_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        sum_3_2_1_reg_968 <= grp_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln45_reg_717_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        sum_3_2_2_reg_984 <= grp_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln45_reg_717_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        sum_3_2_reg_963 <= grp_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_reg_717_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_3_reg_933 <= grp_fu_309_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (ap_enable_reg_pp0_iter9 == 1'b0))) begin
        ap_condition_pp0_exit_iter10_state53 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter10_state53 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln45_reg_717 == 1'd1) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_reg_717 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_256_p4 = select_ln45_6_reg_833;
    end else begin
        ap_phi_mux_i_phi_fu_256_p4 = i_reg_252;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln45_reg_717 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_268_p4 = add_ln45_3_reg_858;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_268_p4 = indvar_flatten_reg_264;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln45_reg_717 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_phi_mux_j_phi_fu_280_p4 = add_ln47_reg_888;
    end else begin
        ap_phi_mux_j_phi_fu_280_p4 = j_reg_276;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        arr_address0 = zext_ln54_9_fu_596_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        arr_address0 = zext_ln54_7_fu_577_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        arr_address0 = zext_ln54_5_fu_546_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        arr_address0 = zext_ln54_3_fu_506_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        arr_address0 = zext_ln54_2_fu_475_p1;
    end else begin
        arr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            arr_address1 = zext_ln54_8_fu_581_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            arr_address1 = zext_ln54_6_fu_556_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            arr_address1 = zext_ln54_4_fu_516_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            arr_address1 = zext_ln54_1_fu_464_p1;
        end else begin
            arr_address1 = 'bx;
        end
    end else begin
        arr_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        arr_ce0 = 1'b1;
    end else begin
        arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        arr_ce1 = 1'b1;
    end else begin
        arr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_309_p0 = sum_3_2_1_reg_968;
    end else if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        grp_fu_309_p0 = sum_3_1_2_reg_958;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_309_p0 = sum_3_1_reg_948;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_309_p0 = sum_3_0_1_reg_938;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_309_p0 = mul_reg_863;
    end else begin
        grp_fu_309_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_309_p1 = mul_2_2_reg_928_pp0_iter9_reg;
    end else if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        grp_fu_309_p1 = mul_2_reg_918_pp0_iter7_reg;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_309_p1 = mul_1_1_reg_908_pp0_iter5_reg;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_309_p1 = mul_0_2_reg_893_pp0_iter3_reg;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_309_p1 = bias;
    end else begin
        grp_fu_309_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        grp_fu_313_p0 = sum_3_2_reg_963;
    end else if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_313_p0 = sum_3_1_1_reg_953;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_313_p0 = sum_3_0_2_reg_943;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_313_p0 = sum_3_reg_933;
    end else begin
        grp_fu_313_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        grp_fu_313_p1 = mul_2_1_reg_923_pp0_iter8_reg;
    end else if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_313_p1 = mul_1_2_reg_913_pp0_iter6_reg;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_313_p1 = mul_1_reg_898_pp0_iter4_reg;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_313_p1 = mul_0_1_reg_868_pp0_iter2_reg;
    end else begin
        grp_fu_313_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)))) begin
        grp_fu_317_p0 = arr_q0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_317_p0 = arr_q1;
    end else begin
        grp_fu_317_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_317_p1 = p_read8;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_317_p1 = p_read6;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        grp_fu_317_p1 = p_read4;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_317_p1 = p_read2;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_317_p1 = p_read;
    end else begin
        grp_fu_317_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)))) begin
        grp_fu_322_p0 = arr_q1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_322_p0 = arr_q0;
    end else begin
        grp_fu_322_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_322_p1 = p_read7;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        grp_fu_322_p1 = p_read5;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_322_p1 = p_read3;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_322_p1 = p_read1;
    end else begin
        grp_fu_322_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_reg_717_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter10 == 1'b1) & (ap_enable_reg_pp0_iter9 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter10 == 1'b1) & (ap_enable_reg_pp0_iter9 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_1_fu_345_p2 = ($signed(w) + $signed(6'd62));

assign add_ln45_2_fu_371_p2 = ($signed(h) + $signed(5'd30));

assign add_ln45_3_fu_585_p2 = (indvar_flatten_reg_264 + 11'd1);

assign add_ln45_4_fu_606_p2 = (t_reg_287 + zext_ln45_2_reg_697);

assign add_ln45_fu_339_p2 = ($signed(h) + $signed(5'd31));

assign add_ln47_fu_601_p2 = (select_ln45_2_reg_730 + 6'd1);

assign add_ln54_1_fu_469_p2 = (j_cast_fu_444_p1 + select_ln45_3_fu_437_p3);

assign add_ln54_2_fu_501_p2 = (add_ln54_reg_747 + 11'd2);

assign add_ln54_3_fu_511_p2 = (zext_ln54_reg_741 + select_ln45_4_fu_495_p3);

assign add_ln54_4_fu_542_p2 = (j_cast_reg_735 + select_ln45_4_reg_772);

assign add_ln54_5_fu_551_p2 = (add_ln54_3_reg_792 + 11'd2);

assign add_ln54_6_fu_561_p2 = (zext_ln54_reg_741 + select_ln45_5_fu_536_p3);

assign add_ln54_7_fu_566_p2 = (j_cast_reg_735 + select_ln45_5_fu_536_p3);

assign add_ln54_8_fu_591_p2 = (add_ln54_6_reg_822 + 11'd2);

assign add_ln54_fu_458_p2 = (zext_ln54_fu_454_p1 + select_ln45_3_fu_437_p3);

assign add_ln57_fu_629_p2 = (select_ln45_1_reg_973 + 11'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage4_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage3_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage4_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage2_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage3_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage4_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage2_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage3_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage4_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage2_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage3_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage4_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage2_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage3_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage4_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_389_p0 = bound_fu_389_p00;

assign bound_fu_389_p00 = select_ln45_fu_377_p3;

assign bound_fu_389_p1 = bound_fu_389_p10;

assign bound_fu_389_p10 = add_ln45_1_fu_345_p2;

assign empty_57_fu_405_p0 = empty_57_fu_405_p00;

assign empty_57_fu_405_p00 = empty_fu_395_p2;

assign empty_57_fu_405_p1 = zext_ln45_reg_689;

assign empty_58_fu_414_p0 = empty_58_fu_414_p00;

assign empty_58_fu_414_p00 = i_reg_252;

assign empty_58_fu_414_p1 = zext_ln45_reg_689;

assign empty_59_fu_480_p2 = (i_reg_252 + 5'd1);

assign empty_60_fu_490_p0 = empty_60_fu_490_p00;

assign empty_60_fu_490_p00 = empty_59_fu_480_p2;

assign empty_60_fu_490_p1 = zext_ln45_reg_689;

assign empty_62_fu_448_p2 = ($signed(select_ln45_2_fu_429_p3) + $signed(6'd63));

assign empty_fu_395_p2 = ($signed(ap_phi_mux_i_phi_fu_256_p4) + $signed(5'd31));

assign icmp_fu_365_p2 = ((tmp_fu_355_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_419_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_268_p4 == bound_reg_702) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_424_p2 = ((ap_phi_mux_j_phi_fu_280_p4 == sub1_reg_684) ? 1'b1 : 1'b0);

assign j_cast_fu_444_p1 = select_ln45_2_fu_429_p3;

assign out_r_address0 = t_3_cast_fu_625_p1;

assign out_r_d0 = sum_3_2_2_reg_984;

assign p_mid111_fu_521_p2 = (i_reg_252 + 5'd2);

assign p_mid113_fu_531_p0 = p_mid113_fu_531_p00;

assign p_mid113_fu_531_p00 = p_mid111_fu_521_p2;

assign p_mid113_fu_531_p1 = zext_ln45_reg_689;

assign select_ln45_1_fu_611_p3 = ((icmp_ln47_reg_721_pp0_iter9_reg[0:0] == 1'b1) ? add_ln45_4_fu_606_p2 : t_3_reg_298);

assign select_ln45_2_fu_429_p3 = ((icmp_ln47_fu_424_p2[0:0] == 1'b1) ? 6'd1 : ap_phi_mux_j_phi_fu_280_p4);

assign select_ln45_3_fu_437_p3 = ((icmp_ln47_fu_424_p2[0:0] == 1'b1) ? empty_58_fu_414_p2 : empty_57_reg_707);

assign select_ln45_4_fu_495_p3 = ((icmp_ln47_reg_721[0:0] == 1'b1) ? empty_60_fu_490_p2 : empty_58_reg_712);

assign select_ln45_5_fu_536_p3 = ((icmp_ln47_reg_721[0:0] == 1'b1) ? p_mid113_fu_531_p2 : empty_60_reg_767);

assign select_ln45_6_fu_571_p3 = ((icmp_ln47_reg_721[0:0] == 1'b1) ? empty_59_reg_762 : i_reg_252);

assign select_ln45_7_fu_618_p3 = ((icmp_ln47_reg_721_pp0_iter9_reg[0:0] == 1'b1) ? add_ln45_4_fu_606_p2 : t_reg_287);

assign select_ln45_fu_377_p3 = ((icmp_fu_365_p2[0:0] == 1'b1) ? add_ln45_2_fu_371_p2 : 5'd0);

assign sub1_fu_329_p2 = ($signed(w) + $signed(6'd63));

assign t_3_cast_fu_625_p1 = select_ln45_1_reg_973;

assign tmp_fu_355_p4 = {{add_ln45_fu_339_p2[4:1]}};

assign zext_ln45_2_fu_351_p1 = add_ln45_1_fu_345_p2;

assign zext_ln45_fu_335_p1 = w;

assign zext_ln54_1_fu_464_p1 = add_ln54_fu_458_p2;

assign zext_ln54_2_fu_475_p1 = add_ln54_1_fu_469_p2;

assign zext_ln54_3_fu_506_p1 = add_ln54_2_fu_501_p2;

assign zext_ln54_4_fu_516_p1 = add_ln54_3_fu_511_p2;

assign zext_ln54_5_fu_546_p1 = add_ln54_4_fu_542_p2;

assign zext_ln54_6_fu_556_p1 = add_ln54_5_fu_551_p2;

assign zext_ln54_7_fu_577_p1 = add_ln54_6_reg_822;

assign zext_ln54_8_fu_581_p1 = add_ln54_7_reg_828;

assign zext_ln54_9_fu_596_p1 = add_ln54_8_fu_591_p2;

assign zext_ln54_fu_454_p1 = empty_62_fu_448_p2;

always @ (posedge ap_clk) begin
    zext_ln45_reg_689[10:6] <= 5'b00000;
    zext_ln45_2_reg_697[10:6] <= 5'b00000;
    j_cast_reg_735[10:6] <= 5'b00000;
    zext_ln54_reg_741[10:6] <= 5'b00000;
end

endmodule //inference_convOperation
