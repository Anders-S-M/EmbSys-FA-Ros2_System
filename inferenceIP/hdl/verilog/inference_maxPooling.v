// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module inference_maxPooling (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_address0,
        arr_ce0,
        arr_q0,
        arr_address1,
        arr_ce1,
        arr_q1,
        w,
        h,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_pp0_stage0 = 9'd32;
parameter    ap_ST_fsm_pp0_stage1 = 9'd64;
parameter    ap_ST_fsm_pp0_stage2 = 9'd128;
parameter    ap_ST_fsm_state13 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] arr_address0;
output   arr_ce0;
input  [31:0] arr_q0;
output  [10:0] arr_address1;
output   arr_ce1;
input  [31:0] arr_q1;
input  [5:0] w;
input  [4:0] h;
output  [10:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] arr_address0;
reg arr_ce0;
reg[10:0] arr_address1;
reg arr_ce1;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] t_1_reg_177;
reg   [63:0] j_reg_187;
wire   [6:0] zext_ln26_fu_223_p1;
reg   [6:0] zext_ln26_reg_696;
wire   [10:0] zext_ln26_2_fu_247_p1;
reg   [10:0] zext_ln26_2_reg_701;
wire   [31:0] zext_ln26_3_fu_257_p1;
reg   [31:0] zext_ln26_3_reg_707;
wire   [63:0] zext_ln26_4_fu_285_p1;
reg   [63:0] zext_ln26_4_reg_712;
wire  signed [10:0] trunc_ln26_fu_294_p1;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln26_fu_289_p2;
reg   [5:0] tmp_11_reg_730;
wire  signed [10:0] grp_fu_686_p2;
reg  signed [10:0] empty_28_reg_735;
wire    ap_CS_fsm_state5;
wire  signed [10:0] grp_fu_691_p2;
reg  signed [10:0] empty_29_reg_741;
wire   [10:0] trunc_ln28_fu_319_p1;
wire   [63:0] zext_ln28_fu_330_p1;
reg   [63:0] zext_ln28_reg_752;
wire   [0:0] icmp_ln28_fu_334_p2;
reg   [0:0] icmp_ln28_reg_757;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln28_reg_757_pp0_iter1_reg;
wire   [10:0] empty_31_fu_339_p1;
reg   [10:0] empty_31_reg_761;
(* use_dsp48 = "no" *) wire   [10:0] add_ln34_fu_343_p2;
reg   [10:0] add_ln34_reg_766;
reg   [10:0] add_ln34_reg_766_pp0_iter1_reg;
(* use_dsp48 = "no" *) wire   [10:0] add_ln34_1_fu_353_p2;
reg   [10:0] add_ln34_1_reg_776;
reg   [10:0] add_ln34_1_reg_776_pp0_iter1_reg;
reg   [31:0] arr_load_1_reg_786;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state7_pp0_stage1_iter0;
wire    ap_block_state10_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] arr_load_2_reg_793;
(* use_dsp48 = "no" *) wire   [10:0] add_ln35_fu_368_p2;
reg   [10:0] add_ln35_reg_801;
reg   [10:0] add_ln35_reg_801_pp0_iter1_reg;
(* use_dsp48 = "no" *) wire   [10:0] add_ln35_1_fu_378_p2;
reg   [10:0] add_ln35_1_reg_811;
wire   [63:0] add_ln28_fu_388_p2;
reg   [63:0] add_ln28_reg_821;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state8_pp0_stage2_iter0;
wire    ap_block_state11_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] arr_load_3_reg_826;
reg   [31:0] arr_load_4_reg_833;
wire   [0:0] or_ln11_fu_423_p2;
reg   [0:0] or_ln11_reg_839;
wire   [0:0] grp_fu_199_p2;
reg   [0:0] tmp_3_reg_846;
wire   [0:0] or_ln11_1_fu_458_p2;
reg   [0:0] or_ln11_1_reg_851;
wire   [0:0] or_ln11_2_fu_503_p2;
reg   [0:0] or_ln11_2_reg_857;
wire   [0:0] or_ln11_3_fu_549_p2;
reg   [0:0] or_ln11_3_reg_863;
wire   [0:0] and_ln11_1_fu_572_p2;
reg   [0:0] and_ln11_1_reg_869;
wire   [0:0] and_ln14_fu_598_p2;
reg   [0:0] and_ln14_reg_876;
wire   [10:0] select_ln14_fu_620_p3;
reg   [10:0] select_ln14_reg_881;
wire   [10:0] add_ln33_fu_669_p2;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] add_ln26_3_fu_675_p2;
wire    ap_CS_fsm_state13;
wire   [31:0] t_2_fu_681_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2_subdone;
reg   [63:0] i_reg_153;
reg   [31:0] t_reg_165;
reg   [63:0] ap_phi_mux_j_phi_fu_191_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln34_fu_348_p1;
wire   [63:0] zext_ln34_1_fu_358_p1;
wire   [63:0] zext_ln35_fu_373_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln35_1_fu_383_p1;
wire   [63:0] zext_ln35_2_fu_659_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] t_1_cast_fu_664_p1;
reg   [31:0] grp_fu_199_p0;
reg   [31:0] grp_fu_199_p1;
reg   [31:0] grp_fu_206_p0;
reg   [31:0] grp_fu_206_p1;
wire   [5:0] sub1_fu_217_p2;
wire   [5:0] add_ln26_fu_227_p2;
wire   [4:0] sub_fu_211_p2;
wire   [4:0] trunc_ln_fu_233_p4;
wire   [4:0] add_ln26_1_fu_251_p2;
wire   [5:0] zext_ln26_1_fu_243_p1;
wire   [5:0] add_ln26_2_fu_261_p2;
wire   [4:0] tmp_fu_267_p4;
wire   [5:0] tmp_10_fu_277_p3;
wire   [6:0] add_ln28_1_fu_304_p2;
wire   [6:0] tmp_12_fu_323_p3;
wire   [10:0] or_ln30_fu_363_p2;
wire   [31:0] bitcast_ln11_fu_394_p1;
wire   [7:0] tmp_1_fu_397_p4;
wire   [22:0] trunc_ln11_fu_407_p1;
wire   [0:0] icmp_ln11_1_fu_417_p2;
wire   [0:0] icmp_ln11_fu_411_p2;
wire   [31:0] bitcast_ln11_1_fu_429_p1;
wire   [7:0] tmp_2_fu_432_p4;
wire   [22:0] trunc_ln11_1_fu_442_p1;
wire   [0:0] icmp_ln11_3_fu_452_p2;
wire   [0:0] icmp_ln11_2_fu_446_p2;
wire   [0:0] and_ln11_fu_464_p2;
wire   [31:0] bitcast_ln11_2_fu_474_p1;
wire   [7:0] tmp_5_fu_477_p4;
wire   [22:0] trunc_ln11_2_fu_487_p1;
wire   [0:0] icmp_ln11_5_fu_497_p2;
wire   [0:0] icmp_ln11_4_fu_491_p2;
wire   [0:0] and_ln11_3_fu_509_p2;
wire   [31:0] bitcast_ln11_3_fu_520_p1;
wire   [7:0] tmp_8_fu_523_p4;
wire   [22:0] trunc_ln11_3_fu_533_p1;
wire   [0:0] icmp_ln11_7_fu_543_p2;
wire   [0:0] icmp_ln11_6_fu_537_p2;
wire   [0:0] and_ln11_5_fu_555_p2;
wire   [0:0] grp_fu_206_p2;
wire   [0:0] and_ln11_4_fu_514_p2;
wire   [0:0] and_ln11_6_fu_560_p2;
wire   [0:0] and_ln11_7_fu_566_p2;
wire   [0:0] and_ln11_2_fu_469_p2;
wire   [0:0] and_ln14_1_fu_578_p2;
wire   [0:0] and_ln14_3_fu_588_p2;
wire   [0:0] and_ln14_2_fu_582_p2;
wire   [0:0] and_ln14_4_fu_592_p2;
wire   [0:0] xor_ln11_fu_609_p2;
wire   [0:0] and_ln14_5_fu_614_p2;
wire   [10:0] select_ln11_fu_604_p3;
wire   [0:0] and_ln17_fu_627_p2;
wire   [0:0] or_ln14_fu_637_p2;
wire   [0:0] and_ln17_1_fu_631_p2;
wire   [0:0] xor_ln14_fu_641_p2;
wire   [0:0] and_ln17_2_fu_647_p2;
wire   [10:0] select_ln17_fu_653_p3;
wire   [5:0] grp_fu_686_p1;
wire  signed [10:0] grp_fu_691_p0;
wire   [5:0] grp_fu_691_p1;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage2_00001;
wire    ap_block_pp0_stage0_00001;
reg   [8:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

inference_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_199_p0),
    .din1(grp_fu_199_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_199_p2)
);

inference_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_206_p0),
    .din1(grp_fu_206_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_206_p2)
);

inference_mul_mul_11s_6ns_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
mul_mul_11s_6ns_11_4_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln26_fu_294_p1),
    .din1(grp_fu_686_p1),
    .ce(1'b1),
    .dout(grp_fu_686_p2)
);

inference_mul_mul_11s_6ns_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
mul_mul_11s_6ns_11_4_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_691_p0),
    .din1(grp_fu_691_p1),
    .ce(1'b1),
    .dout(grp_fu_691_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state6))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_153 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i_reg_153 <= add_ln26_3_fu_675_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln28_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_187 <= add_ln28_reg_821;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_187 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln28_reg_757_pp0_iter1_reg == 1'd0))) begin
        t_1_reg_177 <= add_ln33_fu_669_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        t_1_reg_177 <= trunc_ln28_fu_319_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_reg_165 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        t_reg_165 <= t_2_fu_681_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln28_reg_757 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln28_reg_821 <= add_ln28_fu_388_p2;
        arr_load_3_reg_826 <= arr_q1;
        arr_load_4_reg_833 <= arr_q0;
        tmp_3_reg_846 <= grp_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln28_fu_334_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln34_1_reg_776 <= add_ln34_1_fu_353_p2;
        add_ln34_reg_766 <= add_ln34_fu_343_p2;
        empty_31_reg_761 <= empty_31_fu_339_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln34_1_reg_776_pp0_iter1_reg <= add_ln34_1_reg_776;
        add_ln34_reg_766_pp0_iter1_reg <= add_ln34_reg_766;
        icmp_ln28_reg_757 <= icmp_ln28_fu_334_p2;
        icmp_ln28_reg_757_pp0_iter1_reg <= icmp_ln28_reg_757;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln28_reg_757 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln35_1_reg_811 <= add_ln35_1_fu_378_p2;
        add_ln35_reg_801 <= add_ln35_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln35_reg_801_pp0_iter1_reg <= add_ln35_reg_801;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln28_reg_757 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln11_1_reg_869 <= and_ln11_1_fu_572_p2;
        or_ln11_1_reg_851 <= or_ln11_1_fu_458_p2;
        or_ln11_2_reg_857 <= or_ln11_2_fu_503_p2;
        or_ln11_3_reg_863 <= or_ln11_3_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln28_reg_757_pp0_iter1_reg == 1'd0))) begin
        and_ln14_reg_876 <= and_ln14_fu_598_p2;
        select_ln14_reg_881 <= select_ln14_fu_620_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln28_reg_757 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        arr_load_1_reg_786 <= arr_q1;
        arr_load_2_reg_793 <= arr_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        empty_28_reg_735 <= grp_fu_686_p2;
        empty_29_reg_741 <= grp_fu_691_p2;
        zext_ln28_reg_752[6 : 1] <= zext_ln28_fu_330_p1[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln28_reg_757 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        or_ln11_reg_839 <= or_ln11_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_11_reg_730 <= {{add_ln28_1_fu_304_p2[6:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        zext_ln26_2_reg_701[5 : 0] <= zext_ln26_2_fu_247_p1[5 : 0];
        zext_ln26_3_reg_707[4 : 0] <= zext_ln26_3_fu_257_p1[4 : 0];
        zext_ln26_4_reg_712[5 : 1] <= zext_ln26_4_fu_285_p1[5 : 1];
        zext_ln26_reg_696[5 : 0] <= zext_ln26_fu_223_p1[5 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln28_fu_334_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln26_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln28_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_191_p4 = add_ln28_reg_821;
    end else begin
        ap_phi_mux_j_phi_fu_191_p4 = j_reg_187;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        arr_address0 = zext_ln35_2_fu_659_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        arr_address0 = zext_ln35_1_fu_383_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        arr_address0 = zext_ln34_1_fu_358_p1;
    end else begin
        arr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            arr_address1 = zext_ln35_fu_373_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            arr_address1 = zext_ln34_fu_348_p1;
        end else begin
            arr_address1 = 'bx;
        end
    end else begin
        arr_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        arr_ce0 = 1'b1;
    end else begin
        arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        arr_ce1 = 1'b1;
    end else begin
        arr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_199_p0 = arr_load_2_reg_793;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_199_p0 = arr_load_1_reg_786;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_199_p0 = arr_q1;
    end else begin
        grp_fu_199_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_199_p1 = arr_load_3_reg_826;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_199_p1 = arr_q1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_199_p1 = arr_q0;
    end else begin
        grp_fu_199_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_206_p0 = arr_load_3_reg_826;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_206_p0 = arr_load_2_reg_793;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_206_p0 = arr_load_1_reg_786;
    end else begin
        grp_fu_206_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_206_p1 = arr_load_4_reg_833;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_206_p1 = arr_q0;
    end else begin
        grp_fu_206_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln28_reg_757_pp0_iter1_reg == 1'd0))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln26_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln28_fu_334_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln28_fu_334_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_1_fu_251_p2 = (trunc_ln_fu_233_p4 + 5'd1);

assign add_ln26_2_fu_261_p2 = (zext_ln26_1_fu_243_p1 + 6'd1);

assign add_ln26_3_fu_675_p2 = (i_reg_153 + 64'd2);

assign add_ln26_fu_227_p2 = ($signed(w) + $signed(6'd62));

assign add_ln28_1_fu_304_p2 = (zext_ln26_reg_696 + 7'd1);

assign add_ln28_fu_388_p2 = (j_reg_187 + 64'd2);

assign add_ln33_fu_669_p2 = (t_1_reg_177 + 11'd1);

assign add_ln34_1_fu_353_p2 = ($signed(empty_31_fu_339_p1) + $signed(empty_29_reg_741));

assign add_ln34_fu_343_p2 = ($signed(empty_31_fu_339_p1) + $signed(empty_28_reg_735));

assign add_ln35_1_fu_378_p2 = ($signed(or_ln30_fu_363_p2) + $signed(empty_29_reg_741));

assign add_ln35_fu_368_p2 = ($signed(or_ln30_fu_363_p2) + $signed(empty_28_reg_735));

assign and_ln11_1_fu_572_p2 = (and_ln11_7_fu_566_p2 & and_ln11_2_fu_469_p2);

assign and_ln11_2_fu_469_p2 = (tmp_3_reg_846 & and_ln11_fu_464_p2);

assign and_ln11_3_fu_509_p2 = (or_ln11_reg_839 & or_ln11_2_fu_503_p2);

assign and_ln11_4_fu_514_p2 = (grp_fu_199_p2 & and_ln11_3_fu_509_p2);

assign and_ln11_5_fu_555_p2 = (or_ln11_reg_839 & or_ln11_3_fu_549_p2);

assign and_ln11_6_fu_560_p2 = (grp_fu_206_p2 & and_ln11_5_fu_555_p2);

assign and_ln11_7_fu_566_p2 = (and_ln11_6_fu_560_p2 & and_ln11_4_fu_514_p2);

assign and_ln11_fu_464_p2 = (or_ln11_reg_839 & or_ln11_1_fu_458_p2);

assign and_ln14_1_fu_578_p2 = (or_ln11_2_reg_857 & or_ln11_1_reg_851);

assign and_ln14_2_fu_582_p2 = (grp_fu_199_p2 & and_ln14_1_fu_578_p2);

assign and_ln14_3_fu_588_p2 = (or_ln11_3_reg_863 & or_ln11_1_reg_851);

assign and_ln14_4_fu_592_p2 = (grp_fu_206_p2 & and_ln14_3_fu_588_p2);

assign and_ln14_5_fu_614_p2 = (xor_ln11_fu_609_p2 & and_ln14_fu_598_p2);

assign and_ln14_fu_598_p2 = (and_ln14_4_fu_592_p2 & and_ln14_2_fu_582_p2);

assign and_ln17_1_fu_631_p2 = (grp_fu_206_p2 & and_ln17_fu_627_p2);

assign and_ln17_2_fu_647_p2 = (xor_ln14_fu_641_p2 & and_ln17_1_fu_631_p2);

assign and_ln17_fu_627_p2 = (or_ln11_3_reg_863 & or_ln11_2_reg_857);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln11_1_fu_429_p1 = arr_load_2_reg_793;

assign bitcast_ln11_2_fu_474_p1 = arr_load_3_reg_826;

assign bitcast_ln11_3_fu_520_p1 = arr_load_4_reg_833;

assign bitcast_ln11_fu_394_p1 = arr_load_1_reg_786;

assign empty_31_fu_339_p1 = ap_phi_mux_j_phi_fu_191_p4[10:0];

assign grp_fu_686_p1 = zext_ln26_2_reg_701;

assign grp_fu_691_p0 = (trunc_ln26_fu_294_p1 | 11'd1);

assign grp_fu_691_p1 = zext_ln26_2_reg_701;

assign icmp_ln11_1_fu_417_p2 = ((trunc_ln11_fu_407_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln11_2_fu_446_p2 = ((tmp_2_fu_432_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln11_3_fu_452_p2 = ((trunc_ln11_1_fu_442_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln11_4_fu_491_p2 = ((tmp_5_fu_477_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln11_5_fu_497_p2 = ((trunc_ln11_2_fu_487_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln11_6_fu_537_p2 = ((tmp_8_fu_523_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln11_7_fu_543_p2 = ((trunc_ln11_3_fu_533_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_411_p2 = ((tmp_1_fu_397_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_289_p2 = ((i_reg_153 == zext_ln26_4_reg_712) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_334_p2 = ((ap_phi_mux_j_phi_fu_191_p4 == zext_ln28_reg_752) ? 1'b1 : 1'b0);

assign or_ln11_1_fu_458_p2 = (icmp_ln11_3_fu_452_p2 | icmp_ln11_2_fu_446_p2);

assign or_ln11_2_fu_503_p2 = (icmp_ln11_5_fu_497_p2 | icmp_ln11_4_fu_491_p2);

assign or_ln11_3_fu_549_p2 = (icmp_ln11_7_fu_543_p2 | icmp_ln11_6_fu_537_p2);

assign or_ln11_fu_423_p2 = (icmp_ln11_fu_411_p2 | icmp_ln11_1_fu_417_p2);

assign or_ln14_fu_637_p2 = (and_ln14_reg_876 | and_ln11_1_reg_869);

assign or_ln30_fu_363_p2 = (empty_31_reg_761 | 11'd1);

assign out_r_address0 = t_1_cast_fu_664_p1;

assign out_r_d0 = arr_q0;

assign select_ln11_fu_604_p3 = ((and_ln11_1_reg_869[0:0] == 1'b1) ? add_ln34_reg_766_pp0_iter1_reg : add_ln35_1_reg_811);

assign select_ln14_fu_620_p3 = ((and_ln14_5_fu_614_p2[0:0] == 1'b1) ? add_ln34_1_reg_776_pp0_iter1_reg : select_ln11_fu_604_p3);

assign select_ln17_fu_653_p3 = ((and_ln17_2_fu_647_p2[0:0] == 1'b1) ? add_ln35_reg_801_pp0_iter1_reg : select_ln14_reg_881);

assign sub1_fu_217_p2 = ($signed(w) + $signed(6'd63));

assign sub_fu_211_p2 = ($signed(h) + $signed(5'd31));

assign t_1_cast_fu_664_p1 = t_1_reg_177;

assign t_2_fu_681_p2 = (t_reg_165 + zext_ln26_3_reg_707);

assign tmp_10_fu_277_p3 = {{tmp_fu_267_p4}, {1'd0}};

assign tmp_12_fu_323_p3 = {{tmp_11_reg_730}, {1'd0}};

assign tmp_1_fu_397_p4 = {{bitcast_ln11_fu_394_p1[30:23]}};

assign tmp_2_fu_432_p4 = {{bitcast_ln11_1_fu_429_p1[30:23]}};

assign tmp_5_fu_477_p4 = {{bitcast_ln11_2_fu_474_p1[30:23]}};

assign tmp_8_fu_523_p4 = {{bitcast_ln11_3_fu_520_p1[30:23]}};

assign tmp_fu_267_p4 = {{add_ln26_2_fu_261_p2[5:1]}};

assign trunc_ln11_1_fu_442_p1 = bitcast_ln11_1_fu_429_p1[22:0];

assign trunc_ln11_2_fu_487_p1 = bitcast_ln11_2_fu_474_p1[22:0];

assign trunc_ln11_3_fu_533_p1 = bitcast_ln11_3_fu_520_p1[22:0];

assign trunc_ln11_fu_407_p1 = bitcast_ln11_fu_394_p1[22:0];

assign trunc_ln26_fu_294_p1 = i_reg_153[10:0];

assign trunc_ln28_fu_319_p1 = t_reg_165[10:0];

assign trunc_ln_fu_233_p4 = {{add_ln26_fu_227_p2[5:1]}};

assign xor_ln11_fu_609_p2 = (1'd1 ^ and_ln11_1_reg_869);

assign xor_ln14_fu_641_p2 = (or_ln14_fu_637_p2 ^ 1'd1);

assign zext_ln26_1_fu_243_p1 = sub_fu_211_p2;

assign zext_ln26_2_fu_247_p1 = w;

assign zext_ln26_3_fu_257_p1 = add_ln26_1_fu_251_p2;

assign zext_ln26_4_fu_285_p1 = tmp_10_fu_277_p3;

assign zext_ln26_fu_223_p1 = sub1_fu_217_p2;

assign zext_ln28_fu_330_p1 = tmp_12_fu_323_p3;

assign zext_ln34_1_fu_358_p1 = add_ln34_1_fu_353_p2;

assign zext_ln34_fu_348_p1 = add_ln34_fu_343_p2;

assign zext_ln35_1_fu_383_p1 = add_ln35_1_fu_378_p2;

assign zext_ln35_2_fu_659_p1 = select_ln17_fu_653_p3;

assign zext_ln35_fu_373_p1 = add_ln35_fu_368_p2;

always @ (posedge ap_clk) begin
    zext_ln26_reg_696[6] <= 1'b0;
    zext_ln26_2_reg_701[10:6] <= 5'b00000;
    zext_ln26_3_reg_707[31:5] <= 27'b000000000000000000000000000;
    zext_ln26_4_reg_712[0] <= 1'b0;
    zext_ln26_4_reg_712[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln28_reg_752[0] <= 1'b0;
    zext_ln28_reg_752[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //inference_maxPooling
